// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct SolarFarmDetailsData {
  uint256 electricityBalance;
  uint256 fiatBalance;
  uint256 msPerWh;
  uint256 whPerCentPrice;
}

library SolarFarmDetails {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "SolarFarmDetails", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626170700000000000000000000000536f6c61724661726d44657461696c73);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0080040020202020000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x008004001f1f1f1f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "electricityBalance";
    fieldNames[1] = "fiatBalance";
    fieldNames[2] = "msPerWh";
    fieldNames[3] = "whPerCentPrice";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get electricityBalance.
   */
  function getElectricityBalance() internal view returns (uint256 electricityBalance) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get electricityBalance.
   */
  function _getElectricityBalance() internal view returns (uint256 electricityBalance) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set electricityBalance.
   */
  function setElectricityBalance(uint256 electricityBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((electricityBalance)), _fieldLayout);
  }

  /**
   * @notice Set electricityBalance.
   */
  function _setElectricityBalance(uint256 electricityBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((electricityBalance)), _fieldLayout);
  }

  /**
   * @notice Get fiatBalance.
   */
  function getFiatBalance() internal view returns (uint256 fiatBalance) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get fiatBalance.
   */
  function _getFiatBalance() internal view returns (uint256 fiatBalance) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set fiatBalance.
   */
  function setFiatBalance(uint256 fiatBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((fiatBalance)), _fieldLayout);
  }

  /**
   * @notice Set fiatBalance.
   */
  function _setFiatBalance(uint256 fiatBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((fiatBalance)), _fieldLayout);
  }

  /**
   * @notice Get msPerWh.
   */
  function getMsPerWh() internal view returns (uint256 msPerWh) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get msPerWh.
   */
  function _getMsPerWh() internal view returns (uint256 msPerWh) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set msPerWh.
   */
  function setMsPerWh(uint256 msPerWh) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((msPerWh)), _fieldLayout);
  }

  /**
   * @notice Set msPerWh.
   */
  function _setMsPerWh(uint256 msPerWh) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((msPerWh)), _fieldLayout);
  }

  /**
   * @notice Get whPerCentPrice.
   */
  function getWhPerCentPrice() internal view returns (uint256 whPerCentPrice) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get whPerCentPrice.
   */
  function _getWhPerCentPrice() internal view returns (uint256 whPerCentPrice) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set whPerCentPrice.
   */
  function setWhPerCentPrice(uint256 whPerCentPrice) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((whPerCentPrice)), _fieldLayout);
  }

  /**
   * @notice Set whPerCentPrice.
   */
  function _setWhPerCentPrice(uint256 whPerCentPrice) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((whPerCentPrice)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (SolarFarmDetailsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (SolarFarmDetailsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(uint256 electricityBalance, uint256 fiatBalance, uint256 msPerWh, uint256 whPerCentPrice) internal {
    bytes memory _staticData = encodeStatic(electricityBalance, fiatBalance, msPerWh, whPerCentPrice);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(uint256 electricityBalance, uint256 fiatBalance, uint256 msPerWh, uint256 whPerCentPrice) internal {
    bytes memory _staticData = encodeStatic(electricityBalance, fiatBalance, msPerWh, whPerCentPrice);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(SolarFarmDetailsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.electricityBalance,
      _table.fiatBalance,
      _table.msPerWh,
      _table.whPerCentPrice
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(SolarFarmDetailsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.electricityBalance,
      _table.fiatBalance,
      _table.msPerWh,
      _table.whPerCentPrice
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 electricityBalance, uint256 fiatBalance, uint256 msPerWh, uint256 whPerCentPrice) {
    electricityBalance = (uint256(Bytes.getBytes32(_blob, 0)));

    fiatBalance = (uint256(Bytes.getBytes32(_blob, 32)));

    msPerWh = (uint256(Bytes.getBytes32(_blob, 64)));

    whPerCentPrice = (uint256(Bytes.getBytes32(_blob, 96)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (SolarFarmDetailsData memory _table) {
    (_table.electricityBalance, _table.fiatBalance, _table.msPerWh, _table.whPerCentPrice) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 electricityBalance,
    uint256 fiatBalance,
    uint256 msPerWh,
    uint256 whPerCentPrice
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(electricityBalance, fiatBalance, msPerWh, whPerCentPrice);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 electricityBalance,
    uint256 fiatBalance,
    uint256 msPerWh,
    uint256 whPerCentPrice
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(electricityBalance, fiatBalance, msPerWh, whPerCentPrice);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
