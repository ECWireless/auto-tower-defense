// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct ExpenseReceiptData {
  uint256 amountToBattery;
  uint256 amountToKingdom;
  bytes32 gameId;
  bytes32 playerId;
  bytes32 savedKingdomId;
  uint256 timestamp;
  bytes32[] patentees;
}

library ExpenseReceipt {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "ExpenseReceipt", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f746170700000000000000000000000457870656e7365526563656970740000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00c0060120202020202000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, bytes32, bytes32, bytes32, uint256, bytes32[])
  Schema constant _valueSchema = Schema.wrap(0x00c006011f1f5f5f5f1fc1000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](7);
    fieldNames[0] = "amountToBattery";
    fieldNames[1] = "amountToKingdom";
    fieldNames[2] = "gameId";
    fieldNames[3] = "playerId";
    fieldNames[4] = "savedKingdomId";
    fieldNames[5] = "timestamp";
    fieldNames[6] = "patentees";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set amountToBattery.
   */
  function setAmountToBattery(bytes32 id, uint256 amountToBattery) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((amountToBattery)), _fieldLayout);
  }

  /**
   * @notice Set amountToBattery.
   */
  function _setAmountToBattery(bytes32 id, uint256 amountToBattery) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((amountToBattery)), _fieldLayout);
  }

  /**
   * @notice Set amountToKingdom.
   */
  function setAmountToKingdom(bytes32 id, uint256 amountToKingdom) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((amountToKingdom)), _fieldLayout);
  }

  /**
   * @notice Set amountToKingdom.
   */
  function _setAmountToKingdom(bytes32 id, uint256 amountToKingdom) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((amountToKingdom)), _fieldLayout);
  }

  /**
   * @notice Set gameId.
   */
  function setGameId(bytes32 id, bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((gameId)), _fieldLayout);
  }

  /**
   * @notice Set gameId.
   */
  function _setGameId(bytes32 id, bytes32 gameId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((gameId)), _fieldLayout);
  }

  /**
   * @notice Set playerId.
   */
  function setPlayerId(bytes32 id, bytes32 playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((playerId)), _fieldLayout);
  }

  /**
   * @notice Set playerId.
   */
  function _setPlayerId(bytes32 id, bytes32 playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((playerId)), _fieldLayout);
  }

  /**
   * @notice Set savedKingdomId.
   */
  function setSavedKingdomId(bytes32 id, bytes32 savedKingdomId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((savedKingdomId)), _fieldLayout);
  }

  /**
   * @notice Set savedKingdomId.
   */
  function _setSavedKingdomId(bytes32 id, bytes32 savedKingdomId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((savedKingdomId)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function setTimestamp(bytes32 id, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function _setTimestamp(bytes32 id, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 id,
    uint256 amountToBattery,
    uint256 amountToKingdom,
    bytes32 gameId,
    bytes32 playerId,
    bytes32 savedKingdomId,
    uint256 timestamp,
    bytes32[] memory patentees
  ) internal {
    bytes memory _staticData = encodeStatic(
      amountToBattery,
      amountToKingdom,
      gameId,
      playerId,
      savedKingdomId,
      timestamp
    );

    EncodedLengths _encodedLengths = encodeLengths(patentees);
    bytes memory _dynamicData = encodeDynamic(patentees);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 id,
    uint256 amountToBattery,
    uint256 amountToKingdom,
    bytes32 gameId,
    bytes32 playerId,
    bytes32 savedKingdomId,
    uint256 timestamp,
    bytes32[] memory patentees
  ) internal {
    bytes memory _staticData = encodeStatic(
      amountToBattery,
      amountToKingdom,
      gameId,
      playerId,
      savedKingdomId,
      timestamp
    );

    EncodedLengths _encodedLengths = encodeLengths(patentees);
    bytes memory _dynamicData = encodeDynamic(patentees);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 id, ExpenseReceiptData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.amountToBattery,
      _table.amountToKingdom,
      _table.gameId,
      _table.playerId,
      _table.savedKingdomId,
      _table.timestamp
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.patentees);
    bytes memory _dynamicData = encodeDynamic(_table.patentees);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 id, ExpenseReceiptData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.amountToBattery,
      _table.amountToKingdom,
      _table.gameId,
      _table.playerId,
      _table.savedKingdomId,
      _table.timestamp
    );

    EncodedLengths _encodedLengths = encodeLengths(_table.patentees);
    bytes memory _dynamicData = encodeDynamic(_table.patentees);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 amountToBattery,
      uint256 amountToKingdom,
      bytes32 gameId,
      bytes32 playerId,
      bytes32 savedKingdomId,
      uint256 timestamp
    )
  {
    amountToBattery = (uint256(Bytes.getBytes32(_blob, 0)));

    amountToKingdom = (uint256(Bytes.getBytes32(_blob, 32)));

    gameId = (Bytes.getBytes32(_blob, 64));

    playerId = (Bytes.getBytes32(_blob, 96));

    savedKingdomId = (Bytes.getBytes32(_blob, 128));

    timestamp = (uint256(Bytes.getBytes32(_blob, 160)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    EncodedLengths _encodedLengths,
    bytes memory _blob
  ) internal pure returns (bytes32[] memory patentees) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    patentees = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (ExpenseReceiptData memory _table) {
    (
      _table.amountToBattery,
      _table.amountToKingdom,
      _table.gameId,
      _table.playerId,
      _table.savedKingdomId,
      _table.timestamp
    ) = decodeStatic(_staticData);

    (_table.patentees) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 amountToBattery,
    uint256 amountToKingdom,
    bytes32 gameId,
    bytes32 playerId,
    bytes32 savedKingdomId,
    uint256 timestamp
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(amountToBattery, amountToKingdom, gameId, playerId, savedKingdomId, timestamp);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(bytes32[] memory patentees) internal pure returns (EncodedLengths _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = EncodedLengthsLib.pack(patentees.length * 32);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(bytes32[] memory patentees) internal pure returns (bytes memory) {
    return abi.encodePacked(EncodeArray.encode((patentees)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 amountToBattery,
    uint256 amountToKingdom,
    bytes32 gameId,
    bytes32 playerId,
    bytes32 savedKingdomId,
    uint256 timestamp,
    bytes32[] memory patentees
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      amountToBattery,
      amountToKingdom,
      gameId,
      playerId,
      savedKingdomId,
      timestamp
    );

    EncodedLengths _encodedLengths = encodeLengths(patentees);
    bytes memory _dynamicData = encodeDynamic(patentees);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    return _keyTuple;
  }
}
