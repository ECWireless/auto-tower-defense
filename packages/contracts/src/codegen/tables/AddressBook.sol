// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct AddressBookData {
  address buyEscrowAddress;
  address buyReceiverAddress;
  address sellEmitterAddress;
  address solarFarmAddress;
  address usdcAddress;
}

library AddressBook {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "AddressBook", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462617070000000000000000000000041646472657373426f6f6b0000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0064050014141414140000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of ()
  Schema constant _keySchema = Schema.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (address, address, address, address, address)
  Schema constant _valueSchema = Schema.wrap(0x0064050061616161610000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "buyEscrowAddress";
    fieldNames[1] = "buyReceiverAddress";
    fieldNames[2] = "sellEmitterAddress";
    fieldNames[3] = "solarFarmAddress";
    fieldNames[4] = "usdcAddress";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get buyEscrowAddress.
   */
  function getBuyEscrowAddress() internal view returns (address buyEscrowAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get buyEscrowAddress.
   */
  function _getBuyEscrowAddress() internal view returns (address buyEscrowAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set buyEscrowAddress.
   */
  function setBuyEscrowAddress(address buyEscrowAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((buyEscrowAddress)), _fieldLayout);
  }

  /**
   * @notice Set buyEscrowAddress.
   */
  function _setBuyEscrowAddress(address buyEscrowAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((buyEscrowAddress)), _fieldLayout);
  }

  /**
   * @notice Get buyReceiverAddress.
   */
  function getBuyReceiverAddress() internal view returns (address buyReceiverAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get buyReceiverAddress.
   */
  function _getBuyReceiverAddress() internal view returns (address buyReceiverAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set buyReceiverAddress.
   */
  function setBuyReceiverAddress(address buyReceiverAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((buyReceiverAddress)), _fieldLayout);
  }

  /**
   * @notice Set buyReceiverAddress.
   */
  function _setBuyReceiverAddress(address buyReceiverAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((buyReceiverAddress)), _fieldLayout);
  }

  /**
   * @notice Get sellEmitterAddress.
   */
  function getSellEmitterAddress() internal view returns (address sellEmitterAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get sellEmitterAddress.
   */
  function _getSellEmitterAddress() internal view returns (address sellEmitterAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set sellEmitterAddress.
   */
  function setSellEmitterAddress(address sellEmitterAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((sellEmitterAddress)), _fieldLayout);
  }

  /**
   * @notice Set sellEmitterAddress.
   */
  function _setSellEmitterAddress(address sellEmitterAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((sellEmitterAddress)), _fieldLayout);
  }

  /**
   * @notice Get solarFarmAddress.
   */
  function getSolarFarmAddress() internal view returns (address solarFarmAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get solarFarmAddress.
   */
  function _getSolarFarmAddress() internal view returns (address solarFarmAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set solarFarmAddress.
   */
  function setSolarFarmAddress(address solarFarmAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((solarFarmAddress)), _fieldLayout);
  }

  /**
   * @notice Set solarFarmAddress.
   */
  function _setSolarFarmAddress(address solarFarmAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((solarFarmAddress)), _fieldLayout);
  }

  /**
   * @notice Get usdcAddress.
   */
  function getUsdcAddress() internal view returns (address usdcAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get usdcAddress.
   */
  function _getUsdcAddress() internal view returns (address usdcAddress) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set usdcAddress.
   */
  function setUsdcAddress(address usdcAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((usdcAddress)), _fieldLayout);
  }

  /**
   * @notice Set usdcAddress.
   */
  function _setUsdcAddress(address usdcAddress) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((usdcAddress)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (AddressBookData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (AddressBookData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address buyEscrowAddress,
    address buyReceiverAddress,
    address sellEmitterAddress,
    address solarFarmAddress,
    address usdcAddress
  ) internal {
    bytes memory _staticData = encodeStatic(
      buyEscrowAddress,
      buyReceiverAddress,
      sellEmitterAddress,
      solarFarmAddress,
      usdcAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address buyEscrowAddress,
    address buyReceiverAddress,
    address sellEmitterAddress,
    address solarFarmAddress,
    address usdcAddress
  ) internal {
    bytes memory _staticData = encodeStatic(
      buyEscrowAddress,
      buyReceiverAddress,
      sellEmitterAddress,
      solarFarmAddress,
      usdcAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(AddressBookData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.buyEscrowAddress,
      _table.buyReceiverAddress,
      _table.sellEmitterAddress,
      _table.solarFarmAddress,
      _table.usdcAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(AddressBookData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.buyEscrowAddress,
      _table.buyReceiverAddress,
      _table.sellEmitterAddress,
      _table.solarFarmAddress,
      _table.usdcAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      address buyEscrowAddress,
      address buyReceiverAddress,
      address sellEmitterAddress,
      address solarFarmAddress,
      address usdcAddress
    )
  {
    buyEscrowAddress = (address(Bytes.getBytes20(_blob, 0)));

    buyReceiverAddress = (address(Bytes.getBytes20(_blob, 20)));

    sellEmitterAddress = (address(Bytes.getBytes20(_blob, 40)));

    solarFarmAddress = (address(Bytes.getBytes20(_blob, 60)));

    usdcAddress = (address(Bytes.getBytes20(_blob, 80)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (AddressBookData memory _table) {
    (
      _table.buyEscrowAddress,
      _table.buyReceiverAddress,
      _table.sellEmitterAddress,
      _table.solarFarmAddress,
      _table.usdcAddress
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address buyEscrowAddress,
    address buyReceiverAddress,
    address sellEmitterAddress,
    address solarFarmAddress,
    address usdcAddress
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(buyEscrowAddress, buyReceiverAddress, sellEmitterAddress, solarFarmAddress, usdcAddress);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address buyEscrowAddress,
    address buyReceiverAddress,
    address sellEmitterAddress,
    address solarFarmAddress,
    address usdcAddress
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      buyEscrowAddress,
      buyReceiverAddress,
      sellEmitterAddress,
      solarFarmAddress,
      usdcAddress
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
