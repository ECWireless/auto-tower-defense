// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct TutorialProgressData {
  bool step1Completed;
  bool step2Completed;
  bool step3Completed;
  bool step4Completed;
  bool step5Completed;
  bool step6Completed;
}

library TutorialProgress {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "TutorialProgress", typeId: RESOURCE_OFFCHAIN_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x6f7461707000000000000000000000005475746f7269616c50726f6772657373);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0006060001010101010100000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool, bool, bool, bool, bool, bool)
  Schema constant _valueSchema = Schema.wrap(0x0006060060606060606000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "step1Completed";
    fieldNames[1] = "step2Completed";
    fieldNames[2] = "step3Completed";
    fieldNames[3] = "step4Completed";
    fieldNames[4] = "step5Completed";
    fieldNames[5] = "step6Completed";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set step1Completed.
   */
  function setStep1Completed(bytes32 id, bool step1Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((step1Completed)), _fieldLayout);
  }

  /**
   * @notice Set step1Completed.
   */
  function _setStep1Completed(bytes32 id, bool step1Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((step1Completed)), _fieldLayout);
  }

  /**
   * @notice Set step2Completed.
   */
  function setStep2Completed(bytes32 id, bool step2Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((step2Completed)), _fieldLayout);
  }

  /**
   * @notice Set step2Completed.
   */
  function _setStep2Completed(bytes32 id, bool step2Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((step2Completed)), _fieldLayout);
  }

  /**
   * @notice Set step3Completed.
   */
  function setStep3Completed(bytes32 id, bool step3Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((step3Completed)), _fieldLayout);
  }

  /**
   * @notice Set step3Completed.
   */
  function _setStep3Completed(bytes32 id, bool step3Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((step3Completed)), _fieldLayout);
  }

  /**
   * @notice Set step4Completed.
   */
  function setStep4Completed(bytes32 id, bool step4Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((step4Completed)), _fieldLayout);
  }

  /**
   * @notice Set step4Completed.
   */
  function _setStep4Completed(bytes32 id, bool step4Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((step4Completed)), _fieldLayout);
  }

  /**
   * @notice Set step5Completed.
   */
  function setStep5Completed(bytes32 id, bool step5Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((step5Completed)), _fieldLayout);
  }

  /**
   * @notice Set step5Completed.
   */
  function _setStep5Completed(bytes32 id, bool step5Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((step5Completed)), _fieldLayout);
  }

  /**
   * @notice Set step6Completed.
   */
  function setStep6Completed(bytes32 id, bool step6Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((step6Completed)), _fieldLayout);
  }

  /**
   * @notice Set step6Completed.
   */
  function _setStep6Completed(bytes32 id, bool step6Completed) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((step6Completed)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 id,
    bool step1Completed,
    bool step2Completed,
    bool step3Completed,
    bool step4Completed,
    bool step5Completed,
    bool step6Completed
  ) internal {
    bytes memory _staticData = encodeStatic(
      step1Completed,
      step2Completed,
      step3Completed,
      step4Completed,
      step5Completed,
      step6Completed
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 id,
    bool step1Completed,
    bool step2Completed,
    bool step3Completed,
    bool step4Completed,
    bool step5Completed,
    bool step6Completed
  ) internal {
    bytes memory _staticData = encodeStatic(
      step1Completed,
      step2Completed,
      step3Completed,
      step4Completed,
      step5Completed,
      step6Completed
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 id, TutorialProgressData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.step1Completed,
      _table.step2Completed,
      _table.step3Completed,
      _table.step4Completed,
      _table.step5Completed,
      _table.step6Completed
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 id, TutorialProgressData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.step1Completed,
      _table.step2Completed,
      _table.step3Completed,
      _table.step4Completed,
      _table.step5Completed,
      _table.step6Completed
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      bool step1Completed,
      bool step2Completed,
      bool step3Completed,
      bool step4Completed,
      bool step5Completed,
      bool step6Completed
    )
  {
    step1Completed = (_toBool(uint8(Bytes.getBytes1(_blob, 0))));

    step2Completed = (_toBool(uint8(Bytes.getBytes1(_blob, 1))));

    step3Completed = (_toBool(uint8(Bytes.getBytes1(_blob, 2))));

    step4Completed = (_toBool(uint8(Bytes.getBytes1(_blob, 3))));

    step5Completed = (_toBool(uint8(Bytes.getBytes1(_blob, 4))));

    step6Completed = (_toBool(uint8(Bytes.getBytes1(_blob, 5))));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (TutorialProgressData memory _table) {
    (
      _table.step1Completed,
      _table.step2Completed,
      _table.step3Completed,
      _table.step4Completed,
      _table.step5Completed,
      _table.step6Completed
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bool step1Completed,
    bool step2Completed,
    bool step3Completed,
    bool step4Completed,
    bool step5Completed,
    bool step6Completed
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(step1Completed, step2Completed, step3Completed, step4Completed, step5Completed, step6Completed);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool step1Completed,
    bool step2Completed,
    bool step3Completed,
    bool step4Completed,
    bool step5Completed,
    bool step6Completed
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      step1Completed,
      step2Completed,
      step3Completed,
      step4Completed,
      step5Completed,
      step6Completed
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
