// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct GameData {
  uint8 actionCount;
  uint256 endTimestamp;
  bytes32 player1Id;
  bytes32 player2Id;
  uint8 roundCount;
  uint256 startTimestamp;
  bytes32 turn;
  bytes32 winner;
}

library Game {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Game", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462617070000000000000000000000047616d65000000000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x00c2080001202020012020200000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint8, uint256, bytes32, bytes32, uint8, uint256, bytes32, bytes32)
  Schema constant _valueSchema = Schema.wrap(0x00c20800001f5f5f001f5f5f0000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "actionCount";
    fieldNames[1] = "endTimestamp";
    fieldNames[2] = "player1Id";
    fieldNames[3] = "player2Id";
    fieldNames[4] = "roundCount";
    fieldNames[5] = "startTimestamp";
    fieldNames[6] = "turn";
    fieldNames[7] = "winner";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get actionCount.
   */
  function getActionCount(bytes32 id) internal view returns (uint8 actionCount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get actionCount.
   */
  function _getActionCount(bytes32 id) internal view returns (uint8 actionCount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set actionCount.
   */
  function setActionCount(bytes32 id, uint8 actionCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((actionCount)), _fieldLayout);
  }

  /**
   * @notice Set actionCount.
   */
  function _setActionCount(bytes32 id, uint8 actionCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((actionCount)), _fieldLayout);
  }

  /**
   * @notice Get endTimestamp.
   */
  function getEndTimestamp(bytes32 id) internal view returns (uint256 endTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get endTimestamp.
   */
  function _getEndTimestamp(bytes32 id) internal view returns (uint256 endTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set endTimestamp.
   */
  function setEndTimestamp(bytes32 id, uint256 endTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((endTimestamp)), _fieldLayout);
  }

  /**
   * @notice Set endTimestamp.
   */
  function _setEndTimestamp(bytes32 id, uint256 endTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((endTimestamp)), _fieldLayout);
  }

  /**
   * @notice Get player1Id.
   */
  function getPlayer1Id(bytes32 id) internal view returns (bytes32 player1Id) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get player1Id.
   */
  function _getPlayer1Id(bytes32 id) internal view returns (bytes32 player1Id) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set player1Id.
   */
  function setPlayer1Id(bytes32 id, bytes32 player1Id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((player1Id)), _fieldLayout);
  }

  /**
   * @notice Set player1Id.
   */
  function _setPlayer1Id(bytes32 id, bytes32 player1Id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((player1Id)), _fieldLayout);
  }

  /**
   * @notice Get player2Id.
   */
  function getPlayer2Id(bytes32 id) internal view returns (bytes32 player2Id) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get player2Id.
   */
  function _getPlayer2Id(bytes32 id) internal view returns (bytes32 player2Id) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set player2Id.
   */
  function setPlayer2Id(bytes32 id, bytes32 player2Id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((player2Id)), _fieldLayout);
  }

  /**
   * @notice Set player2Id.
   */
  function _setPlayer2Id(bytes32 id, bytes32 player2Id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((player2Id)), _fieldLayout);
  }

  /**
   * @notice Get roundCount.
   */
  function getRoundCount(bytes32 id) internal view returns (uint8 roundCount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get roundCount.
   */
  function _getRoundCount(bytes32 id) internal view returns (uint8 roundCount) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set roundCount.
   */
  function setRoundCount(bytes32 id, uint8 roundCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((roundCount)), _fieldLayout);
  }

  /**
   * @notice Set roundCount.
   */
  function _setRoundCount(bytes32 id, uint8 roundCount) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((roundCount)), _fieldLayout);
  }

  /**
   * @notice Get startTimestamp.
   */
  function getStartTimestamp(bytes32 id) internal view returns (uint256 startTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get startTimestamp.
   */
  function _getStartTimestamp(bytes32 id) internal view returns (uint256 startTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set startTimestamp.
   */
  function setStartTimestamp(bytes32 id, uint256 startTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((startTimestamp)), _fieldLayout);
  }

  /**
   * @notice Set startTimestamp.
   */
  function _setStartTimestamp(bytes32 id, uint256 startTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((startTimestamp)), _fieldLayout);
  }

  /**
   * @notice Get turn.
   */
  function getTurn(bytes32 id) internal view returns (bytes32 turn) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get turn.
   */
  function _getTurn(bytes32 id) internal view returns (bytes32 turn) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set turn.
   */
  function setTurn(bytes32 id, bytes32 turn) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((turn)), _fieldLayout);
  }

  /**
   * @notice Set turn.
   */
  function _setTurn(bytes32 id, bytes32 turn) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((turn)), _fieldLayout);
  }

  /**
   * @notice Get winner.
   */
  function getWinner(bytes32 id) internal view returns (bytes32 winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Get winner.
   */
  function _getWinner(bytes32 id) internal view returns (bytes32 winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (bytes32(_blob));
  }

  /**
   * @notice Set winner.
   */
  function setWinner(bytes32 id, bytes32 winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Set winner.
   */
  function _setWinner(bytes32 id, bytes32 winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 id) internal view returns (GameData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 id) internal view returns (GameData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 id,
    uint8 actionCount,
    uint256 endTimestamp,
    bytes32 player1Id,
    bytes32 player2Id,
    uint8 roundCount,
    uint256 startTimestamp,
    bytes32 turn,
    bytes32 winner
  ) internal {
    bytes memory _staticData = encodeStatic(
      actionCount,
      endTimestamp,
      player1Id,
      player2Id,
      roundCount,
      startTimestamp,
      turn,
      winner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 id,
    uint8 actionCount,
    uint256 endTimestamp,
    bytes32 player1Id,
    bytes32 player2Id,
    uint8 roundCount,
    uint256 startTimestamp,
    bytes32 turn,
    bytes32 winner
  ) internal {
    bytes memory _staticData = encodeStatic(
      actionCount,
      endTimestamp,
      player1Id,
      player2Id,
      roundCount,
      startTimestamp,
      turn,
      winner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 id, GameData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.actionCount,
      _table.endTimestamp,
      _table.player1Id,
      _table.player2Id,
      _table.roundCount,
      _table.startTimestamp,
      _table.turn,
      _table.winner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 id, GameData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.actionCount,
      _table.endTimestamp,
      _table.player1Id,
      _table.player2Id,
      _table.roundCount,
      _table.startTimestamp,
      _table.turn,
      _table.winner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint8 actionCount,
      uint256 endTimestamp,
      bytes32 player1Id,
      bytes32 player2Id,
      uint8 roundCount,
      uint256 startTimestamp,
      bytes32 turn,
      bytes32 winner
    )
  {
    actionCount = (uint8(Bytes.getBytes1(_blob, 0)));

    endTimestamp = (uint256(Bytes.getBytes32(_blob, 1)));

    player1Id = (Bytes.getBytes32(_blob, 33));

    player2Id = (Bytes.getBytes32(_blob, 65));

    roundCount = (uint8(Bytes.getBytes1(_blob, 97)));

    startTimestamp = (uint256(Bytes.getBytes32(_blob, 98)));

    turn = (Bytes.getBytes32(_blob, 130));

    winner = (Bytes.getBytes32(_blob, 162));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (GameData memory _table) {
    (
      _table.actionCount,
      _table.endTimestamp,
      _table.player1Id,
      _table.player2Id,
      _table.roundCount,
      _table.startTimestamp,
      _table.turn,
      _table.winner
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint8 actionCount,
    uint256 endTimestamp,
    bytes32 player1Id,
    bytes32 player2Id,
    uint8 roundCount,
    uint256 startTimestamp,
    bytes32 turn,
    bytes32 winner
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(actionCount, endTimestamp, player1Id, player2Id, roundCount, startTimestamp, turn, winner);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint8 actionCount,
    uint256 endTimestamp,
    bytes32 player1Id,
    bytes32 player2Id,
    uint8 roundCount,
    uint256 startTimestamp,
    bytes32 turn,
    bytes32 winner
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(
      actionCount,
      endTimestamp,
      player1Id,
      player2Id,
      roundCount,
      startTimestamp,
      turn,
      winner
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    return _keyTuple;
  }
}
