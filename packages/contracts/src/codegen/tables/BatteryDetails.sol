// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct BatteryDetailsData {
  uint256 activeBalance;
  uint256 lastRechargeTimestamp;
  uint256 reserveBalance;
  uint256 stakedBalance;
}

library BatteryDetails {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "BatteryDetails", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x746261707000000000000000000000004261747465727944657461696c730000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0080040020202020000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x008004001f1f1f1f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "id";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "activeBalance";
    fieldNames[1] = "lastRechargeTimestamp";
    fieldNames[2] = "reserveBalance";
    fieldNames[3] = "stakedBalance";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get activeBalance.
   */
  function getActiveBalance(bytes32 id) internal view returns (uint256 activeBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get activeBalance.
   */
  function _getActiveBalance(bytes32 id) internal view returns (uint256 activeBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set activeBalance.
   */
  function setActiveBalance(bytes32 id, uint256 activeBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((activeBalance)), _fieldLayout);
  }

  /**
   * @notice Set activeBalance.
   */
  function _setActiveBalance(bytes32 id, uint256 activeBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((activeBalance)), _fieldLayout);
  }

  /**
   * @notice Get lastRechargeTimestamp.
   */
  function getLastRechargeTimestamp(bytes32 id) internal view returns (uint256 lastRechargeTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get lastRechargeTimestamp.
   */
  function _getLastRechargeTimestamp(bytes32 id) internal view returns (uint256 lastRechargeTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set lastRechargeTimestamp.
   */
  function setLastRechargeTimestamp(bytes32 id, uint256 lastRechargeTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastRechargeTimestamp)), _fieldLayout);
  }

  /**
   * @notice Set lastRechargeTimestamp.
   */
  function _setLastRechargeTimestamp(bytes32 id, uint256 lastRechargeTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((lastRechargeTimestamp)), _fieldLayout);
  }

  /**
   * @notice Get reserveBalance.
   */
  function getReserveBalance(bytes32 id) internal view returns (uint256 reserveBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get reserveBalance.
   */
  function _getReserveBalance(bytes32 id) internal view returns (uint256 reserveBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set reserveBalance.
   */
  function setReserveBalance(bytes32 id, uint256 reserveBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((reserveBalance)), _fieldLayout);
  }

  /**
   * @notice Set reserveBalance.
   */
  function _setReserveBalance(bytes32 id, uint256 reserveBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((reserveBalance)), _fieldLayout);
  }

  /**
   * @notice Get stakedBalance.
   */
  function getStakedBalance(bytes32 id) internal view returns (uint256 stakedBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get stakedBalance.
   */
  function _getStakedBalance(bytes32 id) internal view returns (uint256 stakedBalance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set stakedBalance.
   */
  function setStakedBalance(bytes32 id, uint256 stakedBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((stakedBalance)), _fieldLayout);
  }

  /**
   * @notice Set stakedBalance.
   */
  function _setStakedBalance(bytes32 id, uint256 stakedBalance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((stakedBalance)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 id) internal view returns (BatteryDetailsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 id) internal view returns (BatteryDetailsData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 id,
    uint256 activeBalance,
    uint256 lastRechargeTimestamp,
    uint256 reserveBalance,
    uint256 stakedBalance
  ) internal {
    bytes memory _staticData = encodeStatic(activeBalance, lastRechargeTimestamp, reserveBalance, stakedBalance);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 id,
    uint256 activeBalance,
    uint256 lastRechargeTimestamp,
    uint256 reserveBalance,
    uint256 stakedBalance
  ) internal {
    bytes memory _staticData = encodeStatic(activeBalance, lastRechargeTimestamp, reserveBalance, stakedBalance);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 id, BatteryDetailsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.activeBalance,
      _table.lastRechargeTimestamp,
      _table.reserveBalance,
      _table.stakedBalance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 id, BatteryDetailsData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.activeBalance,
      _table.lastRechargeTimestamp,
      _table.reserveBalance,
      _table.stakedBalance
    );

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (uint256 activeBalance, uint256 lastRechargeTimestamp, uint256 reserveBalance, uint256 stakedBalance)
  {
    activeBalance = (uint256(Bytes.getBytes32(_blob, 0)));

    lastRechargeTimestamp = (uint256(Bytes.getBytes32(_blob, 32)));

    reserveBalance = (uint256(Bytes.getBytes32(_blob, 64)));

    stakedBalance = (uint256(Bytes.getBytes32(_blob, 96)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (BatteryDetailsData memory _table) {
    (_table.activeBalance, _table.lastRechargeTimestamp, _table.reserveBalance, _table.stakedBalance) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 id) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 activeBalance,
    uint256 lastRechargeTimestamp,
    uint256 reserveBalance,
    uint256 stakedBalance
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(activeBalance, lastRechargeTimestamp, reserveBalance, stakedBalance);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 activeBalance,
    uint256 lastRechargeTimestamp,
    uint256 reserveBalance,
    uint256 stakedBalance
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(activeBalance, lastRechargeTimestamp, reserveBalance, stakedBalance);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 id) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = id;

    return _keyTuple;
  }
}
